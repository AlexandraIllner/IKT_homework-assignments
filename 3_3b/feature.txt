Undoing Things
At any stage, you may want to undo something. Here, we’ll review a few basic tools for undoing changes that you’ve made. 
Be careful, because you can’t always undo some of these undos. This is one of the few areas in Git where you may lose some 
work if you do it wrong.

One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your 
commit message. 
If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the --amend option:

$ git commit --amend
This command takes your staging area and uses it for the commit. 
If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), 
then your snapshot will look exactly the same, and all you’ll change is your commit message.

The same commit-message editor fires up, but it already contains the message of your previous commit. You can edit the message 
the same as always, but it overwrites your previous commit.

As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you 
can do something like this:

$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend
You end up with a single commit — the second commit replaces the results of the first.

Note
It’s important to understand that when you’re amending your last commit, 
you’re not so much fixing it as replacing it entirely with a new, improved commit that pushes the old commit out of the way 
and puts the new commit in its place. Effectively, it’s as if the previous commit never happened, and it won’t show up in your 
repository history.

The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository 
history with commit messages of the form, “Oops, forgot to add a file” or “Darn, fixing a typo in last commit”.

Note
Only amend commits that are still local and have not been pushed somewhere. Amending previously pushed commits and force 
pushing the branch will cause problems for your collaborators. For more on what happens when you do this and how to recover if 
you’re on the receiving end read 

The Perils of Rebasing.
